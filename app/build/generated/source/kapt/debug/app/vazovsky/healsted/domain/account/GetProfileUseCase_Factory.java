// Generated by Dagger (https://dagger.dev).
package app.vazovsky.healsted.domain.account;

import app.vazovsky.healsted.data.firebase.auth.FirebaseAuthRepository;
import app.vazovsky.healsted.data.repository.AuthRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class GetProfileUseCase_Factory implements Factory<GetAccountUseCase> {
  private final Provider<FirebaseAuthRepository> firebaseAuthRepositoryProvider;

  private final Provider<AuthRepository> authRepositoryProvider;

  public GetProfileUseCase_Factory(Provider<FirebaseAuthRepository> firebaseAuthRepositoryProvider,
      Provider<AuthRepository> authRepositoryProvider) {
    this.firebaseAuthRepositoryProvider = firebaseAuthRepositoryProvider;
    this.authRepositoryProvider = authRepositoryProvider;
  }

  @Override
  public GetAccountUseCase get() {
    return newInstance(firebaseAuthRepositoryProvider.get(), authRepositoryProvider.get());
  }

  public static GetProfileUseCase_Factory create(
      Provider<FirebaseAuthRepository> firebaseAuthRepositoryProvider,
      Provider<AuthRepository> authRepositoryProvider) {
    return new GetProfileUseCase_Factory(firebaseAuthRepositoryProvider, authRepositoryProvider);
  }

  public static GetAccountUseCase newInstance(FirebaseAuthRepository firebaseAuthRepository,
                                              AuthRepository authRepository) {
    return new GetAccountUseCase(firebaseAuthRepository, authRepository);
  }
}
